#include <iostream>              // Standard I/O
#include <cuda_runtime.h>       // CUDA runtime APIs

// CUDA Kernel for matrix multiplication: C = A × B
__global__ void matrixMul(float *A, float *B, float *C, int N) {
    // Calculate global row index
    int row = threadIdx.y + blockIdx.y * blockDim.y;
    // Calculate global column index
    int col = threadIdx.x + blockIdx.x * blockDim.x;

    // Check bounds
    if (row < N && col < N) {
        float value = 0;
        // Compute dot product of row of A and column of B
        for (int k = 0; k < N; k++) {
            value += A[row * N + k] * B[k * N + col];
        }
        // Store result in C
        C[row * N + col] = value;
    }
}

int main() {
    int N = 3;  // Matrix dimension (N x N)
    size_t size = N * N * sizeof(float); // Total bytes for one matrix

    // Host (CPU) memory allocation
    float *A = (float*)malloc(size);
    float *B = (float*)malloc(size);
    float *C = (float*)malloc(size);

    // Device (GPU) memory allocation
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);

    // Initialize matrices A and B on host
    for (int i = 0; i < N * N; i++) {
        A[i] = (i % N) + 1;              // A = [1 2 3, 1 2 3, 1 2 3]
        B[i] = ((i % N) + 1) * 2;        // B = [2 4 6, 2 4 6, 2 4 6]
    }

    // Copy A and B from host to device
    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    // Define CUDA execution configuration
    dim3 threadsPerBlock(16, 16);  // Each block has 16×16 threads
    dim3 blocksPerGrid((N + 15) / 16, (N + 15) / 16);  // Enough blocks to cover matrix

    // Launch the matrix multiplication kernel
    matrixMul<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);

    // Copy result matrix C back from device to host
    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    // Print matrix A
    std::cout << "Matrix A:" << std::endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cout << A[i * N + j] << " ";
        }
        std::cout << std::endl;
    }

    // Print matrix B
    std::cout << "Matrix B:" << std::endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cout << B[i * N + j] << " ";
        }
        std::cout << std::endl;
    }

    // Print calculation breakdown and result matrix C
    std::cout << "Calculations (C[i][j] = A[i][k] * B[k][j]):" << std::endl;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cout << "C[" << i << "][" << j << "] = ";
            for (int k = 0; k < N; k++) {
                std::cout << A[i * N + k] << "*" << B[k * N + j];
                if (k < N - 1) std::cout << " + ";
            }
            std::cout << " = " << C[i * N + j] << std::endl;
        }
    }

    // Free memory on host and device
    free(A); free(B); free(C);
    cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);

    return 0;  // Program executed successfully
}
