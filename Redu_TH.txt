#include <iostream>
#include <vector>
#include <omp.h> // Include OpenMP for parallel programming
using namespace std;

// Function to compute the sum of array elements in parallel
long parallelSum(const vector<int>& arr) {
    long sum = 0;  // Initialize the sum to 0
    // OpenMP parallel for loop with reduction operation for sum
    #pragma omp parallel for reduction(+:sum)
    for (size_t i = 0; i < arr.size(); ++i) {
        sum += arr[i];  // Add each element to the sum
    }
    return sum;  // Return the final sum after the parallel reduction
}

// Function to compute the maximum value in the array in parallel
int parallelMax(const vector<int>& arr) {
    int max_val = arr[0];  // Initialize the maximum value with the first element
    // OpenMP parallel for loop with reduction operation for max
    #pragma omp parallel for reduction(max:max_val)
    for (size_t i = 1; i < arr.size(); ++i) {
        // Update the maximum value if a larger element is found
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }
    return max_val;  // Return the maximum value found
}

// Function to compute the minimum value in the array in parallel
int parallelMin(const vector<int>& arr) {
    int min_val = arr[0];  // Initialize the minimum value with the first element
    // OpenMP parallel for loop with reduction operation for min
    #pragma omp parallel for reduction(min:min_val)
    for (size_t i = 1; i < arr.size(); ++i) {
        // Update the minimum value if a smaller element is found
        if (arr[i] < min_val) {
            min_val = arr[i];
        }
    }
    return min_val;  // Return the minimum value found
}

// Function to compute the average of the array elements using parallel sum
double parallelAverage(const vector<int>& arr) {
    long sum = parallelSum(arr);  // Get the sum of elements using parallel sum
    return static_cast<double>(sum) / arr.size();  // Return the average by dividing sum by array size
}

int main() {
    int n;  // Variable to store the number of elements
    cout << "Enter the number of elements: ";
    cin >> n;  // Read the number of elements from the user
    
    vector<int> arr(n);  // Create a vector to hold the array of elements
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];  // Read each element from the user and store it in the array
    }
    
    // Call the parallel functions to calculate sum, max, min, and average
    long sum = parallelSum(arr); 
    int max_val = parallelMax(arr);
    int min_val = parallelMin(arr);
    double average = parallelAverage(arr);
    
    // Output the results
    cout << "Sum: " << sum << endl;
    cout << "Max: " << max_val << endl;
    cout << "Min: " << min_val << endl;
    cout << "Average: " << average << endl;
    
    return 0;  // End of the program
}
